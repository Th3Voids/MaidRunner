use crate::modules::core::structs::DataSet;

pub const TONK: &str = "@@";
pub const SPLIT_II: &str = "--";
pub const SPLIT_I: &str = "-";

pub fn data() -> Vec<DataSet> {
    let nuke = vec![
        DataSet::from_str(
            "Securely deletes and overwrites the contents of a device seven times",
            "nuke.hd",
            "shred -vzn 7 @@device",
        ),
        DataSet::from_str(
            "Securely deletes and overwrites a file seven times, then removes it from the filesystem to prevent data recovery.",
            "nuke.file",
            "shred -u -z -n 7 @@file",
        ),
    ];

    let view_sys_log = vec![
        DataSet::from_str(
            "Applogs typically refer to logs generated by specific applications or software. They contain information about the operation, performance, and errors of the application.",
            "view.applogs",
            "find /var/log -type f -name \"*.log\" -exec tail -n 100 {} \\;",
        ),
        DataSet::from_str(
            "syslog: General system messages.",
            "view.syslog",
            "tail -n 100 /var/log/syslog",
        ),
        DataSet::from_str(
            "messages: System messages, including kernel and service messages.",
            "view.messages",
            "tail -n 100 /var/log/messages",
        ),
        DataSet::from_str(
            "authlog: Authentication-related messages.",
            "view.authlog",
            "tail -n 100 /var/log/auth.log",
        ),
        DataSet::from_str(
            "secure: Security-related messages, including authentication and authorization events.",
            "view.secure",
            "tail -n 100 /var/log/secure",
        ),
        DataSet::from_str(
            "kernlog: Kernel-related messages.",
            "view.kernlog",
            "tail -n 100 /var/log/kern.log",
        ),
        DataSet::from_str(
            "auditlog: Audit messages, tracking system events for security auditing.",
            "view.auditlog",
            "tail -n 100 /var/log/audit/audit.log",
        ),
        DataSet::from_str(
            "wtmp: Records all user logins and logouts.",
            "view.wtmp",
            "last -n 100",
        ),
        DataSet::from_str(
            "btmp: Records failed login attempts.",
            "view.btmp",
            "lastb -n 100",
        ),
        DataSet::from_str(
            "lastlog: Records last login information for all users.",
            "view.lastlog",
            "tail -n 100 /var/log/lastlog",
        ),
    ];

    let file_plugin = vec![
        DataSet::from_str("lsof alias", "file.usedby", "lsof @@file_path"),
        DataSet::from_str(
            "creates  a hex dump of a given file or standard input.",
            "file.hex",
            "xxd @@file",
        ),
        DataSet::from_str(
            "Switch to bits (binary digits) dump, rather than hex dump.",
            "file.bin",
            "xxd -b @@file",
        ),
        DataSet::from_str(
           "Takes a hexadecimal dump and converts it back into binary format.",
            "file.dec",
            "xxd -d @@file",
        ),
        DataSet::from_str(
            "Output in PostScript continuous hex dump style. Also known as plain hex dump style.",
            "file.dump",
            "xxd -ps @@file",
        ),
        DataSet::from_str(
            "Create a C header file from a binary file. This header file contains a C array definition representing the binary data in hexadecimal format.",
            "file.list",
            "xxd -i @@file",
        ),
        DataSet::from_str(
            "Utility used to determine the type of a file.",
            "file",
            "file @@file",
        ),
    ];

    let metadata = vec![
        DataSet::from_str(
            "Extracts and displays all metadata from an image file using exiftool.",
            "meta.img",
            "exiftool @@file",
        ),
        DataSet::from_str(
            "Removes all metadata from an image to protect privacy",
            "clean.image",
            "exiftool -all= @@image",
        ),
    ];

    let dns_brute_force = vec![
        DataSet::from_str(
            "scans a domain for directories with a specified wordlist, and saves the results to an output file.",
            "dns.attack.subs",
            "dirb @@domain -w @@wordlist -o @@output",
        ),
        DataSet::from_str(
            "It scans a domain for subdomains using the specified wordlist and saves the results to an output file.",
            "dns.attack.file",
            "dnsenum --enum @@domain -t 15 --threads 4 -f @@wordlist -o @@output",
        ),
    ];

    let nmap = vec![
        DataSet::from_str(
            "Default set of nmap NSE scripts, same as nmap [options] -sC [ip or dns]",
            "map.default",
            "nmap -T3 -D RND:8 --script default @@target",
        ), 
        DataSet::from_str(
            "Try to actively discover more about the network by querying public registries, SNMP-enabled devices, directory services, and the like",
            "map.discovery",
            "nmap -T3 -D RND:88 --script discovery @@target",
        ), 
        DataSet::from_str(
            "Deal with authentication credentials (or bypassing them) on the target system",
            "map.auth",
            "nmap -T3 -D RND:8 --script auth @@target",
        ), 
        DataSet::from_str(
            "Perform general network discovery, are less likely to offend remote administrators",
            "map.safe",
            "nmap -T3 -D RND:8 --script safe @@target",
        ), 
        DataSet::from_str(
            "Check for specific known vulnerabilities and generally only report results if they are found. ",
            "map.vuln",
            "nmap -T3 -D RND:8 --script vuln @@target",
        ), 
    ];

    let firewall = vec![
        DataSet::from_str(
            "Remove all firewall rules non-resible",
            "firewall.flush",
            "ip6tables -F && iptables -F",
        ),
        DataSet::from_str(
            "Drop all incomme connections",
            "firewall.drop.in.all",
            "iptables -A INPUT -p tcp -j DROP && iptables -A INPUT -p udp -j DROP && ip6tables -A INPUT -p tcp -j DROP && ip6tables -A INPUT -p udp -j DROP",
        ),
        DataSet::from_str(
            "Derop all outcome connections",
            "firewall.drop.out.all",
            "iptables -A OUTPUT -p tcp -j DROP && iptables -A OUTPUT -p udp -j DROP && ip6tables -A OUTPUT -p tcp -j DROP && ip6tables -A OUTPUT -p udp -j DROP",
        ),
        DataSet::from_str(
            "Drop all outcome port bigger than expecified port",
            "firewall.drop.bigger",
            "iptables -A OUTPUT -p tcp --dport @@port: -j DROP && iptables -A OUTPUT -p udp --dport @@port: -j DROP && ip6tables -A OUTPUT -p tcp --dport @@port: -j DROP &&    ip6tables -A OUTPUT -p udp --dport @@port: -j DROP",
        ),
    ];

    let general = vec![
        DataSet::from_str("Full website downloader", 
            "web.donwload", 
            "wget --recursive --no-clobber --page-requisites --html-extension --convert-links --restrict-file-names=windows --random-wait --wait=@@wait --limit-rate=200k --tries=inf --domains example.com --no-parent @@url"
        ),
        DataSet::from_str("Scan local connections", "map.local", "ss -tupanr"),
    ];

    return [
        nuke,
        view_sys_log,
        file_plugin,
        metadata,
        dns_brute_force,
        nmap,
        firewall,
        general,
    ]
    .concat();
}
